services:
#Database
  postgres:
    image: postgres:alpine
    container_name: postgres
    restart: unless-stopped
    env_file:
    - .env
    volumes:
    - postgres_data:/var/lib/postgresql/data
  redis:
    image: redis:alpine
    container_name: redis
    restart: unless-stopped
# Authentication
  authentication:
    build:
      context: ./services/authentication
    container_name: authentication
    restart: unless-stopped
    image: authentication
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      DOMAIN_NAME: ${DOMAIN_NAME}
      CLIENT_42_ID: ${CLIENT_42_ID}
      CLIENT_42_SECRET: ${CLIENT_42_SECRET}
      JWT_SECRET_KEY : ${JWT_SECRET_KEY}
      SALT : ${SALT}
      DJANGO_SECRET: ${DJANGO_SECRET}
    depends_on:
    - user-management
# Django app
  user-management:
    build:
      context: ./services/user-management
    container_name: user-management
    restart: unless-stopped
    image: user-management
    environment:
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      JWT_SECRET_KEY : ${JWT_SECRET_KEY}
      DOMAIN_NAME: ${DOMAIN_NAME}
      DJANGO_SECRET: ${DJANGO_SECRET}
    develop:
      watch:
        - path: ./services/user-management/app/
          target: /app/
          action: sync
    volumes:
    #  - user-management-migrations:/app/profile/migrations
     - ./services/user-management/static:/static
     - ./services/blockchain/artifacts:/artifacts
    depends_on:
    - hardhat
# Game 1
  game-serv:
    build:
      context: ./services/game-serv
    container_name: game-serv
    restart: unless-stopped
    image: game-serv
    environment:
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      JWT_SECRET_KEY : ${JWT_SECRET_KEY}
      DOMAIN_NAME: ${DOMAIN_NAME}
      DJANGO_SECRET: ${DJANGO_SECRET}
    develop:
      watch:
        - path: ./services/game-serv/app/
          target: /app/
          action: sync
  game-cron:
    image: game-serv
    container_name: game-cron
    user: root
    command: ./cron.sh
    environment:
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      JWT_SECRET_KEY : ${JWT_SECRET_KEY}
      DOMAIN_NAME: ${DOMAIN_NAME}
      DJANGO_SECRET: ${DJANGO_SECRET}
    depends_on:
    - game-serv
#Ethereum Blockchain emulator
  hardhat:
    build:
      context: ./services/blockchain
    image: hardhat
    container_name: hardhat
    restart: unless-stopped
    volumes:
      - ./services/blockchain/artifacts:/app/artifacts
#Nginx (Proxy server) for all external acces
  nginx:
    container_name: nginx
    restart: unless-stopped
    build:
      context: ./services/nginx
      args:
         KIBANA_PASSWD: ${KIBANA_PASSWD}
    ports:
        - 8081:80
    volumes:
        - ./services/nginx/certificates/:/etc/certificates/
        - ./static:/static/:ro
    environment:
      DOMAIN_NAME: ${DOMAIN_NAME}
    networks:
      - default
volumes:
  postgres_data:
